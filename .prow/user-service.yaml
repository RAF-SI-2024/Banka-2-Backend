# Obratiti pažnju na komentare "PROMENITI PRI KOPIRANJU" i promeniti
# to što se traži.
# "presubmits" su CI jobovi, odnosno jobovi koji su pokreću za svaki
# Pull Request i za svaki novi commit u okviru Pull Request-a.
presubmits:
  # PROMENITI PRI KOPIRANJU
  # Name treba da bude u formatu "pull-<naziv-repozitorijuma>-<naziv-servisa>-test", npr.
  # pull-banka-1-backend-user-service-test ili pull-banka-2-backend-berza-service-test
  - name: pull-banka-2-backend-user-service-test
    # always_run znači da će se job pokrenuti za svaki commit,
    # nezavisno od toga šta taj commit menja.
    # Bolja alternativa je da se job za dati servis pokrene samo
    # ako se taj isti servis promeni, ili se promeni neki od root
    # fajlova (npr. Docker Compose, root pom.xml, definicije job-ova)
    # za šta se koristi run_if_changed.
    # always_run: true
    # PROMENITI PRI KOPIRANJU
    # Ovde treba da zamenite "user-service" sa nazivom direktorijuma
    # servisa koji testirate.
    # Regex string koji označava koji fajlovi treba da budu promenjeni
    # kako bi se ovaj job pokrenuo. "|" funkcioniše kao "OR" operator,
    # drugim rečima ovaj job će da se pokreni ako se promeni neki fajl u
    # "user-service" ili ".prow" direktorijumima, ili se promeni neki
    # od "pom.xml" ili "docker-compose.yml" fajlova.
    # Direktorijumi su naznačeni sa "/" na kraju naziva direktorijuma,
    # npr. "user-service/".
    run_if_changed: "(Bank.UserService/|Scripts/compose.yaml|.prow/)"
    decorate: true
    spec:
      containers:
        # "image" koji se koristi ovde je specijalan tip image-a, tzv. "build image"
        # koji ima sve alate potrebne za izvršavanje CI task-ova. Najbitniji alati
        # uključuju Javu, Maven, Docker i Docker Compose (za pokretanje dependency-a),
        # npm i Google Chrome (za frontend).
        # PROMENITI PRI KOPIRANJU
        # Možete da birate izmenđu dva build image u zavisnosti od Java verzije koju
        # koristite:
        #   - harbor.k8s.elab.rs/base-images/base:java-21-node-18-docker (Java 21)
        #   - harbor.k8s.elab.rs/base-images/base:java-17-node-18-docker (Java 17)
        - image: harbor.k8s.elab.rs/base-images/base:dotnet-9-node-22-docker
          command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail

              start-docker.sh

              # PROMENITI PRI KOPIRANJU
              # Ovde treba da pokrenete sve mikroservise i dependency-e koji vam trebaju
              # za integracione i end to end testove (npr. baze podataka i vaše druge
              # mikroservise).
              # Naredna komanda pokreće servis definisan u "docker-compose.yml" fajlu
              # pod nazivom "postgres-user" (PostgreSQL baza podataka koja se koristi za 
              # user-service u okviru ovog projekta).
              # Promeniti ovu komandu da pokreće one servise koji vam trebaju za vaše
              # testove. Moguće je više puta pokrenuti "docker compose up" za različite
              # Docker Compose servise.
              docker compose up -d ./Scripts/compose.yml --wait user_database
              docker compose up -d ./Scripts/compose.yml --wait user_service
              
              # Ovaj sleep obezbeđuje služi da obezbedi dovoljno vremena da se svi
              # kontejneri pokrenuti iznad pokrenu u potpunosti. Po potreba možete
              # povećati ili smanjiti interval, ili čak zameniti ovaj sleep nekim
              # boljim mehanizmom (npr. healthcheck).
              # sleep 120

              # PROMENITI PRI KOPIRANJU
              # Naziv direktorijuma u kom se nalazi mikroservis koji testirate.
              # SERVICE_NAME="Bank.UserService.Test"
              cd "Bank.UserService.Test"

              # Pokreće sledeće Maven target-e:
              #   - "clean": čisti projekat, npr. ukoliko ste greškom commit-ovali target/ direktorijum
              #   - "test": pokreće sve testove u okviru vaših projekata
              #   - "verify": verifikuje rezultate integracionih testova
              dotnet test
          securityContext:
            privileged: true
          imagePullPolicy: Always
